(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{576:function(s,t,a){"use strict";a.r(t);var n=a(23),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"如果父类中的方法不确定如何进行-方法体的实现-那么这应该是一个抽象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果父类中的方法不确定如何进行-方法体的实现-那么这应该是一个抽象方法"}},[s._v("#")]),s._v(" 如果父类中的方法不确定如何进行{}方法体的实现,那么这应该是一个抽象方法")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/chouxiang.png",alt:"img"}})]),s._v(" "),a("p",[s._v("抽象方法:就是加上abstract 关键字,然后去掉大括号,直接分号结束\n抽象类: 抽象方法所在的类,必须是抽象类才行,在class之前写上 abstract即可")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 抽象类")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 抽象方法,代表吃什么,但是具体吃什么(大括号的内容)不确定")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 动物类有的吃方法,但是不够具体,不知道吃什么,所以抽象")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 普通方法↓")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("normal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"如何使用抽象类和抽象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用抽象类和抽象方法"}},[s._v("#")]),s._v(" 如何使用抽象类和抽象方法")]),s._v(" "),a("ol",[a("li",[s._v("不能直接创建(new)抽象类对象")]),s._v(" "),a("li",[s._v("必须用一个子类来继承抽象类")]),s._v(" "),a("li",[s._v("子类必须覆盖重写抽象父类当中所有的抽象方法")])]),s._v(" "),a("blockquote",[a("p",[s._v("覆盖重写(实现):子类去掉抽象方法的abstract关键字,然后补上方法体大括号")])]),s._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[s._v("创建子类对象进行使用")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/chouxiang2.png",alt:"img"}})]),s._v(" "),a("blockquote",[a("p",[s._v("一个抽象类不一定含有抽象方法,只要保证抽象方法所在的类是抽象类即可,这样没有抽象方法的抽象类,也不嗯呢该直接创建对象,在一些特殊场景下有用")])])])}),[],!1,null,null,null);t.default=e.exports}}]);