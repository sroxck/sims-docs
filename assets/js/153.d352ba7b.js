(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{592:function(t,e,r){"use strict";r.r(e);var a=r(23),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"线程池"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),r("p",[r("code",[t._v("线程池: 容器 --\x3e 集合(ArrayList,HashSet,LinkedList<Thread>,HashMap)")]),t._v(" "),r("img",{attrs:{src:"/img/xc.png",alt:"img"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/xc1.png",alt:"img"}})]),t._v(" "),r("h2",{attrs:{id:"线程池的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池的使用"}},[t._v("#")]),t._v(" 线程池的使用")]),t._v(" "),r("blockquote",[r("p",[t._v("java.util.concurrent")])]),t._v(" "),r("h2",{attrs:{id:"executors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#executors"}},[t._v("#")]),t._v(" Executors")]),t._v(" "),r("p",[t._v("线程池的工厂类,用于创建线程池")]),t._v(" "),r("h3",{attrs:{id:"static-executorservice-newfixedthreadpool-int-number"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#static-executorservice-newfixedthreadpool-int-number"}},[t._v("#")]),t._v(" static ExecutorService newFixedThreadPool(int number)")]),t._v(" "),r("p",[t._v("创建一个可重复使用的固定线程数的线程池"),r("br"),t._v("\n参数是创建的线程数量\n线程池的使用步骤:")]),t._v(" "),r("ol",[r("li",[t._v("使用工厂类 Executors.newFixedThreadPool")]),t._v(" "),r("li",[t._v("创建一个类,实现runable方法,重写run设置任务")]),t._v(" "),r("li",[t._v("调用ExecutorServe中的方法submit传递任务,开启线程执行run方法")]),t._v(" "),r("li",[t._v("调用ShotDown销毁线程池(不建议)")])]),t._v(" "),r("p",[t._v("线程池会一直开启,使用完后会把线程归还线程池,可以继续使用")])])}),[],!1,null,null,null);e.default=s.exports}}]);